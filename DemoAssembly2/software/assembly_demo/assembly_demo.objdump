
assembly_demo.elf:     file format elf32-littlenios2
assembly_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000838 memsz 0x00000838 flags r-x
    LOAD off    0x00001858 vaddr 0x00008858 paddr 0x00008e44 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x00002430 vaddr 0x00009430 paddr 0x00009430 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001e44  2**0
                  CONTENTS
  2 .text         00000828  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00008848  00008848  00001848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  00008858  00008e44  00001858  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009430  00009430  00002430  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009440  00009440  00001e44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000039df  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000112f  00000000  00000000  00005af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001200  00000000  00000000  00006c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  00007e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e5f  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000430  00000000  00000000  00009067  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00009498  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  000094a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000a6e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000a6e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a6f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a6f6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000a6f7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000a6fb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000a6ff  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0000a703  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000a707  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000a70b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0000a70f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0000a71a  2**0
                  CONTENTS, READONLY
 29 .jdi          00005216  00000000  00000000  0000a73f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d00d  00000000  00000000  0000f955  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008848 l    d  .rodata	00000000 .rodata
00008858 l    d  .rwdata	00000000 .rwdata
00009430 l    d  .bss	00000000 .bss
00009440 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../assembly_demo_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/lights.o
00011010 l       *ABS*	00000000 Switches
00011000 l       *ABS*	00000000 LEDs
0000806c l       .text	00000000 loop
00000000 l    df *ABS*	00000000 alt_load.c
00008078 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00008220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008354 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00008a00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008164 g     F .text	00000060 alt_main
00008e44 g       *ABS*	00000000 __flash_rwdata_start
000084e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000943c g     O .bss	00000004 errno
00009434 g     O .bss	00000004 alt_argv
00010e24 g       *ABS*	00000000 _gp
00008880 g     O .rwdata	00000180 alt_fd_list
00008848 g       *ABS*	00000000 __DTOR_END__
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008e34 g     O .rwdata	00000004 alt_max_fd
00008e3c g     O .rwdata	00000004 _global_impure_ptr
00009440 g       *ABS*	00000000 __bss_end
00008858 g     O .rwdata	00000028 alt_dev_null
00008334 g     F .text	00000020 alt_dcache_flush_all
00008e44 g       *ABS*	00000000 __ram_rwdata_end
00008e2c g     O .rwdata	00000008 alt_dev_list
00008858 g       *ABS*	00000000 __ram_rodata_end
00009440 g       *ABS*	00000000 end
00008848 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000866c g     F .text	00000180 __call_exitprocs
00008020 g     F .text	0000003c _start
000081fc g     F .text	00000024 alt_sys_init
00008554 g     F .text	00000118 __register_exitproc
000087ec g     F .text	00000028 .hidden __mulsi3
00008858 g       *ABS*	00000000 __ram_rwdata_start
00008848 g       *ABS*	00000000 __ram_rodata_start
00009440 g       *ABS*	00000000 __alt_stack_base
00009430 g       *ABS*	00000000 __bss_start
0000805c g       .text	00000000 main
00009438 g     O .bss	00000004 alt_envp
00008e38 g     O .rwdata	00000004 alt_errno
00008848 g       *ABS*	00000000 __CTOR_END__
00008848 g       *ABS*	00000000 __flash_rodata_start
00008848 g       *ABS*	00000000 __DTOR_LIST__
000081c4 g     F .text	00000038 alt_irq_init
00008460 g     F .text	00000084 alt_release_fd
00008508 g     F .text	00000014 atexit
00008e40 g     O .rwdata	00000004 _impure_ptr
00009430 g     O .bss	00000004 alt_argc
000083e0 g     F .text	00000060 _do_dtors
00008e24 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008e44 g       *ABS*	00000000 _edata
00009440 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000851c g     F .text	00000038 exit
00010000 g       *ABS*	00000000 __alt_data_end
00008814 g     F .text	00000034 _exit
00008440 g     F .text	00000020 alt_icache_flush_all
00008380 g     F .text	00000060 _do_ctors
0000825c g     F .text	000000d8 close
000080e0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6838914 	ori	gp,gp,3620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a50c14 	ori	r2,r2,37936

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e51014 	ori	r3,r3,37952

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <Switches+0xffff7034>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080e00 	call	80e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081640 	call	8164 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <Switches+0xffff7048>

0000805c <main>:
.equ LEDs,     0x11000    #find the base address of Switches in the system.h file

#Define the main program
.global main
main: 	#load r2 and r3 with the addresses
  movia r2, Switches
    805c:	00800074 	movhi	r2,1
    8060:	10840414 	ori	r2,r2,4112
  movia r3, LEDs
    8064:	00c00074 	movhi	r3,1
    8068:	18c40014 	ori	r3,r3,4096

0000806c <loop>:

loop: 	#read from r2 and store to r3
  ldbio r4, 0(r2)
    806c:	11000027 	ldbio	r4,0(r2)
  stbio r4, 0(r3)
    8070:	19000025 	stbio	r4,0(r3)
  br    loop
    8074:	003ffd06 	br	806c <Switches+0xffff705c>

00008078 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8078:	defffc04 	addi	sp,sp,-16
    807c:	df000315 	stw	fp,12(sp)
    8080:	df000304 	addi	fp,sp,12
    8084:	e13ffd15 	stw	r4,-12(fp)
    8088:	e17ffe15 	stw	r5,-8(fp)
    808c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8090:	e0fffe17 	ldw	r3,-8(fp)
    8094:	e0bffd17 	ldw	r2,-12(fp)
    8098:	18800c26 	beq	r3,r2,80cc <alt_load_section+0x54>
  {
    while( to != end )
    809c:	00000806 	br	80c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    80a0:	e0bffe17 	ldw	r2,-8(fp)
    80a4:	10c00104 	addi	r3,r2,4
    80a8:	e0fffe15 	stw	r3,-8(fp)
    80ac:	e0fffd17 	ldw	r3,-12(fp)
    80b0:	19000104 	addi	r4,r3,4
    80b4:	e13ffd15 	stw	r4,-12(fp)
    80b8:	18c00017 	ldw	r3,0(r3)
    80bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    80c0:	e0fffe17 	ldw	r3,-8(fp)
    80c4:	e0bfff17 	ldw	r2,-4(fp)
    80c8:	18bff51e 	bne	r3,r2,80a0 <Switches+0xffff7090>
    {
      *to++ = *from++;
    }
  }
}
    80cc:	0001883a 	nop
    80d0:	e037883a 	mov	sp,fp
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00104 	addi	sp,sp,4
    80dc:	f800283a 	ret

000080e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80e0:	defffe04 	addi	sp,sp,-8
    80e4:	dfc00115 	stw	ra,4(sp)
    80e8:	df000015 	stw	fp,0(sp)
    80ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    80f0:	01800074 	movhi	r6,1
    80f4:	31a39104 	addi	r6,r6,-29116
    80f8:	01400074 	movhi	r5,1
    80fc:	29621604 	addi	r5,r5,-30632
    8100:	01000074 	movhi	r4,1
    8104:	21239104 	addi	r4,r4,-29116
    8108:	00080780 	call	8078 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    810c:	01800074 	movhi	r6,1
    8110:	31a00804 	addi	r6,r6,-32736
    8114:	01400074 	movhi	r5,1
    8118:	29600804 	addi	r5,r5,-32736
    811c:	01000074 	movhi	r4,1
    8120:	21200804 	addi	r4,r4,-32736
    8124:	00080780 	call	8078 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8128:	01800074 	movhi	r6,1
    812c:	31a21604 	addi	r6,r6,-30632
    8130:	01400074 	movhi	r5,1
    8134:	29621204 	addi	r5,r5,-30648
    8138:	01000074 	movhi	r4,1
    813c:	21221204 	addi	r4,r4,-30648
    8140:	00080780 	call	8078 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8144:	00083340 	call	8334 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8148:	00084400 	call	8440 <alt_icache_flush_all>
}
    814c:	0001883a 	nop
    8150:	e037883a 	mov	sp,fp
    8154:	dfc00117 	ldw	ra,4(sp)
    8158:	df000017 	ldw	fp,0(sp)
    815c:	dec00204 	addi	sp,sp,8
    8160:	f800283a 	ret

00008164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8164:	defffd04 	addi	sp,sp,-12
    8168:	dfc00215 	stw	ra,8(sp)
    816c:	df000115 	stw	fp,4(sp)
    8170:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8174:	0009883a 	mov	r4,zero
    8178:	00081c40 	call	81c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    817c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8180:	00081fc0 	call	81fc <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8184:	00083800 	call	8380 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8188:	01000074 	movhi	r4,1
    818c:	2120f804 	addi	r4,r4,-31776
    8190:	00085080 	call	8508 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8194:	d0a18317 	ldw	r2,-31220(gp)
    8198:	d0e18417 	ldw	r3,-31216(gp)
    819c:	d1218517 	ldw	r4,-31212(gp)
    81a0:	200d883a 	mov	r6,r4
    81a4:	180b883a 	mov	r5,r3
    81a8:	1009883a 	mov	r4,r2
    81ac:	000805c0 	call	805c <main>
    81b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    81b4:	01000044 	movi	r4,1
    81b8:	000825c0 	call	825c <close>
  exit (result);
    81bc:	e13fff17 	ldw	r4,-4(fp)
    81c0:	000851c0 	call	851c <exit>

000081c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81c4:	defffd04 	addi	sp,sp,-12
    81c8:	dfc00215 	stw	ra,8(sp)
    81cc:	df000115 	stw	fp,4(sp)
    81d0:	df000104 	addi	fp,sp,4
    81d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    81d8:	00084e40 	call	84e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81dc:	00800044 	movi	r2,1
    81e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81e4:	0001883a 	nop
    81e8:	e037883a 	mov	sp,fp
    81ec:	dfc00117 	ldw	ra,4(sp)
    81f0:	df000017 	ldw	fp,0(sp)
    81f4:	dec00204 	addi	sp,sp,8
    81f8:	f800283a 	ret

000081fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    81fc:	deffff04 	addi	sp,sp,-4
    8200:	df000015 	stw	fp,0(sp)
    8204:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8208:	0001883a 	nop
}
    820c:	0001883a 	nop
    8210:	e037883a 	mov	sp,fp
    8214:	df000017 	ldw	fp,0(sp)
    8218:	dec00104 	addi	sp,sp,4
    821c:	f800283a 	ret

00008220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8220:	defffe04 	addi	sp,sp,-8
    8224:	dfc00115 	stw	ra,4(sp)
    8228:	df000015 	stw	fp,0(sp)
    822c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8230:	d0a00517 	ldw	r2,-32748(gp)
    8234:	10000326 	beq	r2,zero,8244 <alt_get_errno+0x24>
    8238:	d0a00517 	ldw	r2,-32748(gp)
    823c:	103ee83a 	callr	r2
    8240:	00000106 	br	8248 <alt_get_errno+0x28>
    8244:	d0a18604 	addi	r2,gp,-31208
}
    8248:	e037883a 	mov	sp,fp
    824c:	dfc00117 	ldw	ra,4(sp)
    8250:	df000017 	ldw	fp,0(sp)
    8254:	dec00204 	addi	sp,sp,8
    8258:	f800283a 	ret

0000825c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    825c:	defffb04 	addi	sp,sp,-20
    8260:	dfc00415 	stw	ra,16(sp)
    8264:	df000315 	stw	fp,12(sp)
    8268:	df000304 	addi	fp,sp,12
    826c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8270:	e0bfff17 	ldw	r2,-4(fp)
    8274:	10000816 	blt	r2,zero,8298 <close+0x3c>
    8278:	01400304 	movi	r5,12
    827c:	e13fff17 	ldw	r4,-4(fp)
    8280:	00087ec0 	call	87ec <__mulsi3>
    8284:	1007883a 	mov	r3,r2
    8288:	00800074 	movhi	r2,1
    828c:	10a22004 	addi	r2,r2,-30592
    8290:	1885883a 	add	r2,r3,r2
    8294:	00000106 	br	829c <close+0x40>
    8298:	0005883a 	mov	r2,zero
    829c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    82a0:	e0bffd17 	ldw	r2,-12(fp)
    82a4:	10001926 	beq	r2,zero,830c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    82a8:	e0bffd17 	ldw	r2,-12(fp)
    82ac:	10800017 	ldw	r2,0(r2)
    82b0:	10800417 	ldw	r2,16(r2)
    82b4:	10000626 	beq	r2,zero,82d0 <close+0x74>
    82b8:	e0bffd17 	ldw	r2,-12(fp)
    82bc:	10800017 	ldw	r2,0(r2)
    82c0:	10800417 	ldw	r2,16(r2)
    82c4:	e13ffd17 	ldw	r4,-12(fp)
    82c8:	103ee83a 	callr	r2
    82cc:	00000106 	br	82d4 <close+0x78>
    82d0:	0005883a 	mov	r2,zero
    82d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    82d8:	e13fff17 	ldw	r4,-4(fp)
    82dc:	00084600 	call	8460 <alt_release_fd>
    if (rval < 0)
    82e0:	e0bffe17 	ldw	r2,-8(fp)
    82e4:	1000070e 	bge	r2,zero,8304 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    82e8:	00082200 	call	8220 <alt_get_errno>
    82ec:	1007883a 	mov	r3,r2
    82f0:	e0bffe17 	ldw	r2,-8(fp)
    82f4:	0085c83a 	sub	r2,zero,r2
    82f8:	18800015 	stw	r2,0(r3)
      return -1;
    82fc:	00bfffc4 	movi	r2,-1
    8300:	00000706 	br	8320 <close+0xc4>
    }
    return 0;
    8304:	0005883a 	mov	r2,zero
    8308:	00000506 	br	8320 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    830c:	00082200 	call	8220 <alt_get_errno>
    8310:	1007883a 	mov	r3,r2
    8314:	00801444 	movi	r2,81
    8318:	18800015 	stw	r2,0(r3)
    return -1;
    831c:	00bfffc4 	movi	r2,-1
  }
}
    8320:	e037883a 	mov	sp,fp
    8324:	dfc00117 	ldw	ra,4(sp)
    8328:	df000017 	ldw	fp,0(sp)
    832c:	dec00204 	addi	sp,sp,8
    8330:	f800283a 	ret

00008334 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8334:	deffff04 	addi	sp,sp,-4
    8338:	df000015 	stw	fp,0(sp)
    833c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8340:	0001883a 	nop
    8344:	e037883a 	mov	sp,fp
    8348:	df000017 	ldw	fp,0(sp)
    834c:	dec00104 	addi	sp,sp,4
    8350:	f800283a 	ret

00008354 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8354:	defffc04 	addi	sp,sp,-16
    8358:	df000315 	stw	fp,12(sp)
    835c:	df000304 	addi	fp,sp,12
    8360:	e13ffd15 	stw	r4,-12(fp)
    8364:	e17ffe15 	stw	r5,-8(fp)
    8368:	e1bfff15 	stw	r6,-4(fp)
  return len;
    836c:	e0bfff17 	ldw	r2,-4(fp)
}
    8370:	e037883a 	mov	sp,fp
    8374:	df000017 	ldw	fp,0(sp)
    8378:	dec00104 	addi	sp,sp,4
    837c:	f800283a 	ret

00008380 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    8380:	defffd04 	addi	sp,sp,-12
    8384:	dfc00215 	stw	ra,8(sp)
    8388:	df000115 	stw	fp,4(sp)
    838c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8390:	00800074 	movhi	r2,1
    8394:	10a21104 	addi	r2,r2,-30652
    8398:	e0bfff15 	stw	r2,-4(fp)
    839c:	00000606 	br	83b8 <_do_ctors+0x38>
        (*ctor) (); 
    83a0:	e0bfff17 	ldw	r2,-4(fp)
    83a4:	10800017 	ldw	r2,0(r2)
    83a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    83ac:	e0bfff17 	ldw	r2,-4(fp)
    83b0:	10bfff04 	addi	r2,r2,-4
    83b4:	e0bfff15 	stw	r2,-4(fp)
    83b8:	e0ffff17 	ldw	r3,-4(fp)
    83bc:	00800074 	movhi	r2,1
    83c0:	10a21204 	addi	r2,r2,-30648
    83c4:	18bff62e 	bgeu	r3,r2,83a0 <Switches+0xffff7390>
        (*ctor) (); 
}
    83c8:	0001883a 	nop
    83cc:	e037883a 	mov	sp,fp
    83d0:	dfc00117 	ldw	ra,4(sp)
    83d4:	df000017 	ldw	fp,0(sp)
    83d8:	dec00204 	addi	sp,sp,8
    83dc:	f800283a 	ret

000083e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    83e0:	defffd04 	addi	sp,sp,-12
    83e4:	dfc00215 	stw	ra,8(sp)
    83e8:	df000115 	stw	fp,4(sp)
    83ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    83f0:	00800074 	movhi	r2,1
    83f4:	10a21104 	addi	r2,r2,-30652
    83f8:	e0bfff15 	stw	r2,-4(fp)
    83fc:	00000606 	br	8418 <_do_dtors+0x38>
        (*dtor) (); 
    8400:	e0bfff17 	ldw	r2,-4(fp)
    8404:	10800017 	ldw	r2,0(r2)
    8408:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    840c:	e0bfff17 	ldw	r2,-4(fp)
    8410:	10bfff04 	addi	r2,r2,-4
    8414:	e0bfff15 	stw	r2,-4(fp)
    8418:	e0ffff17 	ldw	r3,-4(fp)
    841c:	00800074 	movhi	r2,1
    8420:	10a21204 	addi	r2,r2,-30648
    8424:	18bff62e 	bgeu	r3,r2,8400 <Switches+0xffff73f0>
        (*dtor) (); 
}
    8428:	0001883a 	nop
    842c:	e037883a 	mov	sp,fp
    8430:	dfc00117 	ldw	ra,4(sp)
    8434:	df000017 	ldw	fp,0(sp)
    8438:	dec00204 	addi	sp,sp,8
    843c:	f800283a 	ret

00008440 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8440:	deffff04 	addi	sp,sp,-4
    8444:	df000015 	stw	fp,0(sp)
    8448:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    844c:	0001883a 	nop
    8450:	e037883a 	mov	sp,fp
    8454:	df000017 	ldw	fp,0(sp)
    8458:	dec00104 	addi	sp,sp,4
    845c:	f800283a 	ret

00008460 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8460:	defffc04 	addi	sp,sp,-16
    8464:	dfc00315 	stw	ra,12(sp)
    8468:	df000215 	stw	fp,8(sp)
    846c:	dc000115 	stw	r16,4(sp)
    8470:	df000204 	addi	fp,sp,8
    8474:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    8478:	e0bffe17 	ldw	r2,-8(fp)
    847c:	108000d0 	cmplti	r2,r2,3
    8480:	1000111e 	bne	r2,zero,84c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    8484:	04000074 	movhi	r16,1
    8488:	84222004 	addi	r16,r16,-30592
    848c:	e0bffe17 	ldw	r2,-8(fp)
    8490:	01400304 	movi	r5,12
    8494:	1009883a 	mov	r4,r2
    8498:	00087ec0 	call	87ec <__mulsi3>
    849c:	8085883a 	add	r2,r16,r2
    84a0:	10800204 	addi	r2,r2,8
    84a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    84a8:	04000074 	movhi	r16,1
    84ac:	84222004 	addi	r16,r16,-30592
    84b0:	e0bffe17 	ldw	r2,-8(fp)
    84b4:	01400304 	movi	r5,12
    84b8:	1009883a 	mov	r4,r2
    84bc:	00087ec0 	call	87ec <__mulsi3>
    84c0:	8085883a 	add	r2,r16,r2
    84c4:	10000015 	stw	zero,0(r2)
  }
}
    84c8:	0001883a 	nop
    84cc:	e6ffff04 	addi	sp,fp,-4
    84d0:	dfc00217 	ldw	ra,8(sp)
    84d4:	df000117 	ldw	fp,4(sp)
    84d8:	dc000017 	ldw	r16,0(sp)
    84dc:	dec00304 	addi	sp,sp,12
    84e0:	f800283a 	ret

000084e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    84e4:	deffff04 	addi	sp,sp,-4
    84e8:	df000015 	stw	fp,0(sp)
    84ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    84f0:	000170fa 	wrctl	ienable,zero
}
    84f4:	0001883a 	nop
    84f8:	e037883a 	mov	sp,fp
    84fc:	df000017 	ldw	fp,0(sp)
    8500:	dec00104 	addi	sp,sp,4
    8504:	f800283a 	ret

00008508 <atexit>:
    8508:	200b883a 	mov	r5,r4
    850c:	000f883a 	mov	r7,zero
    8510:	000d883a 	mov	r6,zero
    8514:	0009883a 	mov	r4,zero
    8518:	00085541 	jmpi	8554 <__register_exitproc>

0000851c <exit>:
    851c:	defffe04 	addi	sp,sp,-8
    8520:	000b883a 	mov	r5,zero
    8524:	dc000015 	stw	r16,0(sp)
    8528:	dfc00115 	stw	ra,4(sp)
    852c:	2021883a 	mov	r16,r4
    8530:	000866c0 	call	866c <__call_exitprocs>
    8534:	00800074 	movhi	r2,1
    8538:	10a38f04 	addi	r2,r2,-29124
    853c:	11000017 	ldw	r4,0(r2)
    8540:	20800f17 	ldw	r2,60(r4)
    8544:	10000126 	beq	r2,zero,854c <exit+0x30>
    8548:	103ee83a 	callr	r2
    854c:	8009883a 	mov	r4,r16
    8550:	00088140 	call	8814 <_exit>

00008554 <__register_exitproc>:
    8554:	defffa04 	addi	sp,sp,-24
    8558:	dc000315 	stw	r16,12(sp)
    855c:	04000074 	movhi	r16,1
    8560:	84238f04 	addi	r16,r16,-29124
    8564:	80c00017 	ldw	r3,0(r16)
    8568:	dc400415 	stw	r17,16(sp)
    856c:	dfc00515 	stw	ra,20(sp)
    8570:	18805217 	ldw	r2,328(r3)
    8574:	2023883a 	mov	r17,r4
    8578:	10003726 	beq	r2,zero,8658 <__register_exitproc+0x104>
    857c:	10c00117 	ldw	r3,4(r2)
    8580:	010007c4 	movi	r4,31
    8584:	20c00e16 	blt	r4,r3,85c0 <__register_exitproc+0x6c>
    8588:	1a000044 	addi	r8,r3,1
    858c:	8800221e 	bne	r17,zero,8618 <__register_exitproc+0xc4>
    8590:	18c00084 	addi	r3,r3,2
    8594:	18c7883a 	add	r3,r3,r3
    8598:	18c7883a 	add	r3,r3,r3
    859c:	12000115 	stw	r8,4(r2)
    85a0:	10c7883a 	add	r3,r2,r3
    85a4:	19400015 	stw	r5,0(r3)
    85a8:	0005883a 	mov	r2,zero
    85ac:	dfc00517 	ldw	ra,20(sp)
    85b0:	dc400417 	ldw	r17,16(sp)
    85b4:	dc000317 	ldw	r16,12(sp)
    85b8:	dec00604 	addi	sp,sp,24
    85bc:	f800283a 	ret
    85c0:	00800034 	movhi	r2,0
    85c4:	10800004 	addi	r2,r2,0
    85c8:	10002626 	beq	r2,zero,8664 <__register_exitproc+0x110>
    85cc:	01006404 	movi	r4,400
    85d0:	d9400015 	stw	r5,0(sp)
    85d4:	d9800115 	stw	r6,4(sp)
    85d8:	d9c00215 	stw	r7,8(sp)
    85dc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    85e0:	d9400017 	ldw	r5,0(sp)
    85e4:	d9800117 	ldw	r6,4(sp)
    85e8:	d9c00217 	ldw	r7,8(sp)
    85ec:	10001d26 	beq	r2,zero,8664 <__register_exitproc+0x110>
    85f0:	81000017 	ldw	r4,0(r16)
    85f4:	10000115 	stw	zero,4(r2)
    85f8:	02000044 	movi	r8,1
    85fc:	22405217 	ldw	r9,328(r4)
    8600:	0007883a 	mov	r3,zero
    8604:	12400015 	stw	r9,0(r2)
    8608:	20805215 	stw	r2,328(r4)
    860c:	10006215 	stw	zero,392(r2)
    8610:	10006315 	stw	zero,396(r2)
    8614:	883fde26 	beq	r17,zero,8590 <Switches+0xffff7580>
    8618:	18c9883a 	add	r4,r3,r3
    861c:	2109883a 	add	r4,r4,r4
    8620:	1109883a 	add	r4,r2,r4
    8624:	21802215 	stw	r6,136(r4)
    8628:	01800044 	movi	r6,1
    862c:	12406217 	ldw	r9,392(r2)
    8630:	30cc983a 	sll	r6,r6,r3
    8634:	4992b03a 	or	r9,r9,r6
    8638:	12406215 	stw	r9,392(r2)
    863c:	21c04215 	stw	r7,264(r4)
    8640:	01000084 	movi	r4,2
    8644:	893fd21e 	bne	r17,r4,8590 <Switches+0xffff7580>
    8648:	11006317 	ldw	r4,396(r2)
    864c:	218cb03a 	or	r6,r4,r6
    8650:	11806315 	stw	r6,396(r2)
    8654:	003fce06 	br	8590 <Switches+0xffff7580>
    8658:	18805304 	addi	r2,r3,332
    865c:	18805215 	stw	r2,328(r3)
    8660:	003fc606 	br	857c <Switches+0xffff756c>
    8664:	00bfffc4 	movi	r2,-1
    8668:	003fd006 	br	85ac <Switches+0xffff759c>

0000866c <__call_exitprocs>:
    866c:	defff504 	addi	sp,sp,-44
    8670:	df000915 	stw	fp,36(sp)
    8674:	dd400615 	stw	r21,24(sp)
    8678:	dc800315 	stw	r18,12(sp)
    867c:	dfc00a15 	stw	ra,40(sp)
    8680:	ddc00815 	stw	r23,32(sp)
    8684:	dd800715 	stw	r22,28(sp)
    8688:	dd000515 	stw	r20,20(sp)
    868c:	dcc00415 	stw	r19,16(sp)
    8690:	dc400215 	stw	r17,8(sp)
    8694:	dc000115 	stw	r16,4(sp)
    8698:	d9000015 	stw	r4,0(sp)
    869c:	2839883a 	mov	fp,r5
    86a0:	04800044 	movi	r18,1
    86a4:	057fffc4 	movi	r21,-1
    86a8:	00800074 	movhi	r2,1
    86ac:	10a38f04 	addi	r2,r2,-29124
    86b0:	12000017 	ldw	r8,0(r2)
    86b4:	45005217 	ldw	r20,328(r8)
    86b8:	44c05204 	addi	r19,r8,328
    86bc:	a0001c26 	beq	r20,zero,8730 <__call_exitprocs+0xc4>
    86c0:	a0800117 	ldw	r2,4(r20)
    86c4:	15ffffc4 	addi	r23,r2,-1
    86c8:	b8000d16 	blt	r23,zero,8700 <__call_exitprocs+0x94>
    86cc:	14000044 	addi	r16,r2,1
    86d0:	8421883a 	add	r16,r16,r16
    86d4:	8421883a 	add	r16,r16,r16
    86d8:	84402004 	addi	r17,r16,128
    86dc:	a463883a 	add	r17,r20,r17
    86e0:	a421883a 	add	r16,r20,r16
    86e4:	e0001e26 	beq	fp,zero,8760 <__call_exitprocs+0xf4>
    86e8:	80804017 	ldw	r2,256(r16)
    86ec:	e0801c26 	beq	fp,r2,8760 <__call_exitprocs+0xf4>
    86f0:	bdffffc4 	addi	r23,r23,-1
    86f4:	843fff04 	addi	r16,r16,-4
    86f8:	8c7fff04 	addi	r17,r17,-4
    86fc:	bd7ff91e 	bne	r23,r21,86e4 <Switches+0xffff76d4>
    8700:	00800034 	movhi	r2,0
    8704:	10800004 	addi	r2,r2,0
    8708:	10000926 	beq	r2,zero,8730 <__call_exitprocs+0xc4>
    870c:	a0800117 	ldw	r2,4(r20)
    8710:	1000301e 	bne	r2,zero,87d4 <__call_exitprocs+0x168>
    8714:	a0800017 	ldw	r2,0(r20)
    8718:	10003226 	beq	r2,zero,87e4 <__call_exitprocs+0x178>
    871c:	a009883a 	mov	r4,r20
    8720:	98800015 	stw	r2,0(r19)
    8724:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    8728:	9d000017 	ldw	r20,0(r19)
    872c:	a03fe41e 	bne	r20,zero,86c0 <Switches+0xffff76b0>
    8730:	dfc00a17 	ldw	ra,40(sp)
    8734:	df000917 	ldw	fp,36(sp)
    8738:	ddc00817 	ldw	r23,32(sp)
    873c:	dd800717 	ldw	r22,28(sp)
    8740:	dd400617 	ldw	r21,24(sp)
    8744:	dd000517 	ldw	r20,20(sp)
    8748:	dcc00417 	ldw	r19,16(sp)
    874c:	dc800317 	ldw	r18,12(sp)
    8750:	dc400217 	ldw	r17,8(sp)
    8754:	dc000117 	ldw	r16,4(sp)
    8758:	dec00b04 	addi	sp,sp,44
    875c:	f800283a 	ret
    8760:	a0800117 	ldw	r2,4(r20)
    8764:	80c00017 	ldw	r3,0(r16)
    8768:	10bfffc4 	addi	r2,r2,-1
    876c:	15c01426 	beq	r2,r23,87c0 <__call_exitprocs+0x154>
    8770:	80000015 	stw	zero,0(r16)
    8774:	183fde26 	beq	r3,zero,86f0 <Switches+0xffff76e0>
    8778:	95c8983a 	sll	r4,r18,r23
    877c:	a0806217 	ldw	r2,392(r20)
    8780:	a5800117 	ldw	r22,4(r20)
    8784:	2084703a 	and	r2,r4,r2
    8788:	10000b26 	beq	r2,zero,87b8 <__call_exitprocs+0x14c>
    878c:	a0806317 	ldw	r2,396(r20)
    8790:	2088703a 	and	r4,r4,r2
    8794:	20000c1e 	bne	r4,zero,87c8 <__call_exitprocs+0x15c>
    8798:	89400017 	ldw	r5,0(r17)
    879c:	d9000017 	ldw	r4,0(sp)
    87a0:	183ee83a 	callr	r3
    87a4:	a0800117 	ldw	r2,4(r20)
    87a8:	15bfbf1e 	bne	r2,r22,86a8 <Switches+0xffff7698>
    87ac:	98800017 	ldw	r2,0(r19)
    87b0:	153fcf26 	beq	r2,r20,86f0 <Switches+0xffff76e0>
    87b4:	003fbc06 	br	86a8 <Switches+0xffff7698>
    87b8:	183ee83a 	callr	r3
    87bc:	003ff906 	br	87a4 <Switches+0xffff7794>
    87c0:	a5c00115 	stw	r23,4(r20)
    87c4:	003feb06 	br	8774 <Switches+0xffff7764>
    87c8:	89000017 	ldw	r4,0(r17)
    87cc:	183ee83a 	callr	r3
    87d0:	003ff406 	br	87a4 <Switches+0xffff7794>
    87d4:	a0800017 	ldw	r2,0(r20)
    87d8:	a027883a 	mov	r19,r20
    87dc:	1029883a 	mov	r20,r2
    87e0:	003fb606 	br	86bc <Switches+0xffff76ac>
    87e4:	0005883a 	mov	r2,zero
    87e8:	003ffb06 	br	87d8 <Switches+0xffff77c8>

000087ec <__mulsi3>:
    87ec:	0005883a 	mov	r2,zero
    87f0:	20000726 	beq	r4,zero,8810 <__mulsi3+0x24>
    87f4:	20c0004c 	andi	r3,r4,1
    87f8:	2008d07a 	srli	r4,r4,1
    87fc:	18000126 	beq	r3,zero,8804 <__mulsi3+0x18>
    8800:	1145883a 	add	r2,r2,r5
    8804:	294b883a 	add	r5,r5,r5
    8808:	203ffa1e 	bne	r4,zero,87f4 <Switches+0xffff77e4>
    880c:	f800283a 	ret
    8810:	f800283a 	ret

00008814 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8814:	defffd04 	addi	sp,sp,-12
    8818:	df000215 	stw	fp,8(sp)
    881c:	df000204 	addi	fp,sp,8
    8820:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8824:	0001883a 	nop
    8828:	e0bfff17 	ldw	r2,-4(fp)
    882c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    8830:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8834:	10000226 	beq	r2,zero,8840 <_exit+0x2c>
    ALT_SIM_FAIL();
    8838:	002af070 	cmpltui	zero,zero,43969
    883c:	00000106 	br	8844 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    8840:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8844:	003fff06 	br	8844 <Switches+0xffff7834>
