
//Lab_6_Part5

#include <stdio.h>
#include <stdlib.h>
#include "system.h"
#include "io.h"
#include "alt_types.h"
#include "sys/alt_irq.h"

//---standard embedded type definitions---//
typedef   signed char   sint8;            // signed 8 bit values
typedef unsigned char   uint8;            // unsigned 8 bit values
typedef   signed short  sint16;           // signed 16 bit values
typedef unsigned short  uint16;           // unsigned 16 bit values
typedef   signed long   sint32;           // signed 32 bit values
typedef unsigned long   uint32;

//moves each PIO to a pointer
volatile uint32* PushbuttonPTR	         =(uint32*) PUSHBUTTONS_BASE;
volatile uint32* Ram32bitPTR             =(uint32*) INFERRED_RAM_BE_0_BASE;
volatile uint16* Ram16bitPTR             =(uint16*) INFERRED_RAM_BE_0_BASE;
volatile uint8*  Ram8bitPTR              =(uint8*)  INFERRED_RAM_BE_0_BASE;
uint32* JtagUartPtr 					 =(uint32*) JTAG_UART_0_BASE;
uint8*  LedPtr                           =(uint8*)  LEDS_BASE;

//Variables to pass into memory access function
volatile uint32 sAddress;
volatile uint32 Testdata;
volatile uint32 ram_size = 16384; //bytes come from raminfr component

//Variables for Ramp Test
uint32  Ramp32;  
uint16  Ramp16;
uint8   Ramp8; 

uint8  Mem_loop;
volatile uint8 Push_read;

//Variables to check the data
volatile uint32 Check32bit;
volatile uint32 Check16bit;
volatile uint32 Check8bit;

void Memory_Access_8(uint8 sAddress, uint32 ram_size, uint8 Testdata)
{
    for(int i = 0; i<ram_size;i++){ //writes the data in each location request
       *(Ram8bitPTR + i) = Testdata;
    }
    for(int i= 0; i<ram_size;i++) //reads the Data in each location to see if it wrote incorrectly
    {
      Check8bit = *(Ram8bitPTR + i);//if data incorrect LEDs turn on
      if(Check8bit != Testdata){
          printf("\n\nERROR: Address: %x Read value: %x Expected value: %x",i, *(Ram8bitPTR + i), Testdata);
          *LedPtr |= 0xFF;
      }
    }
}

void Memory_Access_16(uint16 sAddress, uint32 ram_size, uint16 Testdata)
{
   for(int i = 0; i<ram_size;i++){ //writes the data in each location request
       *(Ram16bitPTR + i) = Testdata;
    }
    for(int i= 0; i<ram_size;i++) //reads the Data in each location to see if it wrote incorrectly
    {
      Check16bit = *(Ram16bitPTR + i);//if data incorrect LEDs turn on
      if(Check16bit != Testdata){
          printf("\n\nERROR: Address: %x Read value: %x Expected value: %x",(i*2), *(Ram16bitPTR + i), Testdata);
          *LedPtr |= 0xFF;
      }
    }
}
void Memory_Access_32(uint32 sAddress, uint32 ram_size, uint32 Testdata)
{
   for(int i = 0; i<ram_size;i++){ //writes the data in each location request
       *(Ram32bitPTR + i) = Testdata;
    }
    for(int i= 0; i<ram_size;i++) //reads the Data in each location to see if it wrote incorrectly
    {
      Check32bit = *(Ram32bitPTR + i);//if data incorrect LEDs turn on
      if(Check32bit != Testdata){
          printf("\n\nERROR: Address: %x Read value: %x Expected value: %x",(i*4), *(Ram32bitPTR + i), Testdata);
          *LedPtr |= 0xFF;
      }
    }
}
void PushButton_isr(void *context) //pushbutton ISR
{
	*(PushbuttonPTR + 3 ) = 0; //clears edge
    *LedPtr |= 0x32; //THE UNIQUE LED lights
    printf("\nRam Test Done");
    Mem_loop = 0;
    exit(0);//stops the code
}
int main(void){
    // LED start off and loop Memory access functions
    *LedPtr = 0x00;
    Mem_loop = 1;
    *(PushbuttonPTR + 2) |= 0x02;  // Enable interrupt on KEY1
    *(PushbuttonPTR + 3) = 0;      // Clear edge
    alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, PUSHBUTTONS_IRQ, PushButton_isr, 0, 0);  // Pushbutton interrupt

    // Start memory test with an interrupt flag
    while (Mem_loop == 1) {
        // Interrupt-based handling, no need for polling
        __asm__("NOP");  // Use a NOP to keep the CPU busy while waiting for interrupts
    }

    return 0;
}
